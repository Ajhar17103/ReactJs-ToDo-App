{"version":3,"sources":["Components/TableView/Index.jsx","Components/CreateTodoForm/Index.jsx","Components/Controllers/Search-Panel.jsx","Components/Controllers/FilterController.jsx","Components/Controllers/ViewControlle.jsx","Components/Controllers/BulkController.jsx","Components/Controllers/Index.jsx","Components/todos/Index.jsx","Components/ListView/Index.jsx","App.js","reportWebVitals.js","index.js"],"names":["RowIteam","todo","toggleSelect","toggleComplete","scope","CustomInput","type","id","checked","isSelect","onChange","time","toDateString","text","Button","className","onClick","color","isComplete","TableView","todos","Table","map","CreateTodoForm","state","description","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","props","createTodo","reset","Form","onSubmit","this","FormGroup","Label","Input","placeholder","Component","SearchPanel","term","toggleForm","handleSearch","FilterController","handleFilter","ButtonGroup","ViewControlle","view","changeView","for","BulkController","clearSelected","clearCompleted","Controller","Row","Col","md","size","Todos","Date","isOpenTodoForm","searchTerm","filter","todoId","find","t","SearchTerm","shortid","generate","performSearch","toLowerCase","includes","performFilter","getView","Modal","isOpen","toggle","ModalHeader","ModalBody","ListItem","ListGroupItem","ListView","ListGroup","App","Container","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAKIA,EAAS,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,KAAKC,EAA+B,EAA/BA,aAAaC,EAAkB,EAAlBA,eAC7B,OACI,+BACI,oBAAIC,MAAM,MAAV,SACA,cAACC,EAAA,EAAD,CACAC,KAAK,WACJC,GAAIN,EAAKM,GACTC,QAASP,EAAKQ,SACdC,SAAU,kBAAIR,EAAaD,EAAKM,SAIjC,6BACKN,EAAKU,KAAKC,iBAEf,6BACKX,EAAKY,OAEV,6BACI,cAACC,EAAA,EAAD,CAAQC,UAAU,GAAGC,QAAS,kBAAIb,EAAeF,EAAKM,KAAKU,MAAOhB,EAAKiB,WAAa,SAAU,UAA9F,SAEQjB,EAAKiB,WAAa,WAAW,kBA6CtCC,EAhCD,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAMjB,EAA+B,EAA/BA,eAAeD,EAAgB,EAAhBA,aACjC,OACI,eAACmB,EAAA,EAAD,WACA,gCACI,+BACI,mCACA,sCACA,sCACC,6CAGT,gCACGD,EAAME,KAAI,SAAArB,GAAI,OACX,cAAC,EAAD,CAEAA,KAAMA,EACNE,eAAgBA,EAChBD,aAAcA,GAHTD,EAAKM,a,gECQTgB,E,4MAxDTC,MAAM,CACFX,KAAK,GACLY,YAAY,I,EAGhBC,aAAa,SAACC,GACV,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAMH,EAAEE,OAAOE,S,EAIjCC,aAAa,SAACL,GACZA,EAAEM,iBACF,EAAKC,MAAMC,WAAW,EAAKX,OAC3BG,EAAEE,OAAOO,QACT,EAAKR,SAAS,CACVf,KAAK,GACNY,YAAY,M,4CAInB,WACI,OACI,eAACY,EAAA,EAAD,CAAMC,SAAUC,KAAKP,aAArB,UACI,eAACQ,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,8BACA,cAACC,EAAA,EAAD,CACEpC,KAAK,OACNO,KAAK,OACLiB,KAAK,OACLa,YAAY,eACZZ,MAAOQ,KAAKf,MAAMX,KAClBH,SAAU6B,KAAKb,kBAGpB,eAACc,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,8BACA,cAACC,EAAA,EAAD,CACAZ,KAAK,cACLxB,KAAK,WACLqC,YAAY,eACZZ,MAAOQ,KAAKf,MAAMC,YAClBf,SAAU6B,KAAKb,kBAGnB,cAACZ,EAAA,EAAD,CAAQR,KAAK,SAAb,gC,GA9CesC,aCuBfC,MAvBf,YAAsD,IAAhCC,EAA+B,EAA/BA,KAAKC,EAA0B,EAA1BA,WAAWC,EAAe,EAAfA,aAClC,OACI,sBAAKjC,UAAU,SAAf,UACI,cAAC2B,EAAA,EAAD,CACAC,YAAY,kBACZ5B,UAAU,QACVe,KAAK,OACLC,MAAOe,EACPpC,SAAU,SAAAiB,GAAIqB,EAAarB,EAAEE,OAAOE,UAEpC,cAACjB,EAAA,EAAD,CAAQG,MAAM,UAAUD,QAAS+B,EAAjC,qB,QCWEE,MArBf,YAA2C,IAAhBC,EAAe,EAAfA,aACvB,OACI,8BACI,eAACC,EAAA,EAAD,WACI,cAACrC,EAAA,EAAD,CAAQG,MAAM,UAAUD,QAAS,kBAAIkC,EAAa,QAAlD,iBAGA,cAACpC,EAAA,EAAD,CAASG,MAAM,UAAUD,QAAS,kBAAIkC,EAAa,YAAnD,qBAGA,cAACpC,EAAA,EAAD,CAAQG,MAAM,SAASD,QAAS,kBAAIkC,EAAa,cAAjD,6BCkCDE,MA3Cf,YAA4C,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,WAC1B,OACI,sBAAKvC,UAAU,SAAf,UACI,eAAC0B,EAAA,EAAD,CAAOc,IAAI,YAAYxC,UAAU,mBAAjC,UACA,cAACV,EAAA,EAAD,CACCC,KAAK,QACLwB,KAAK,OACLC,MAAM,OACNxB,GAAG,YACHG,SAAU4C,EACVvC,UAAU,kBACVP,QAAgB,SAAP6C,IARV,eAaA,eAACZ,EAAA,EAAD,CAAOc,IAAI,aAAaxC,UAAU,OAAlC,UACA,cAACV,EAAA,EAAD,CACCC,KAAK,QACLwB,KAAK,OACLC,MAAM,QACNxB,GAAG,aACHG,SAAU4C,EACVvC,UAAU,kBACVP,QAAgB,UAAP6C,IARV,oBCOGG,MAxBf,YAA+D,IAAtCC,EAAqC,EAArCA,cAAcC,EAAuB,EAAvBA,eAAetB,EAAQ,EAARA,MAClD,OACI,8BACI,eAACe,EAAA,EAAD,WACI,cAACrC,EAAA,EAAD,CAAQG,MAAM,SAASD,QAAS,kBAAKyC,EAAc,kBAAnD,4BAGA,cAAC3C,EAAA,EAAD,CAASG,MAAM,SAASD,QAAS,kBAAI0C,EAAe,mBAApD,6BAGA,cAAC5C,EAAA,EAAD,CAAQG,MAAM,SAASD,QAAS,kBAAIoB,EAAM,UAA1C,yBCyCDuB,EA/CA,SAAC,GAAD,IAAEb,EAAF,EAAEA,KAAKE,EAAP,EAAOA,aAAaD,EAApB,EAAoBA,WAAWG,EAA/B,EAA+BA,aAAaG,EAA5C,EAA4CA,KAAKC,EAAjD,EAAiDA,WAAWI,EAA5D,EAA4DA,eAAeD,EAA3E,EAA2EA,cAAcrB,EAAzF,EAAyFA,MAAzF,OACX,gCACI,cAAC,EAAD,CACGU,KAAMA,EACNE,aAAcA,EACdD,WAAYA,IAEd,eAACa,EAAA,EAAD,CAAK7C,UAAU,OAAf,UACD,cAAC8C,EAAA,EAAD,CAAKC,GAAI,CAACC,KAAK,GAAf,SAEQ,cAAC,EAAD,CAAkBb,aAAcA,MAGxC,cAACW,EAAA,EAAD,CAAKC,GAAI,CAACC,KAAK,GAAIlD,KAAK,SAAxB,SAEU,cAAC,EAAD,CACAwC,KAAMA,EACNC,WAAYA,MAKtB,cAACO,EAAA,EAAD,CAAKC,GAAI,CAACC,KAAK,GAAIhD,UAAU,SAA7B,SACc,qBAAKA,UAAU,WAAf,SACA,cAAC,EAAD,CACA2C,eAAgBA,EAChBD,cAAeA,EACfrB,MAAOA,e,iBC0Jd4B,E,4MAnLXxC,MAAM,CACFJ,MAAM,CACF,CACAb,GAAG,KACHM,KAAK,6BACLY,YAAY,qBACZd,KAAM,IAAIsD,KACV/C,YAAW,EACXT,UAAS,IAIjByD,gBAAe,EACfC,WAAW,GACXd,KAAK,OACLe,OAAO,O,EAKPlE,aAAa,SAACmE,GACV,IAAIjD,EAAM,YAAI,EAAKI,MAAMJ,OACrBnB,EAAKmB,EAAMkD,MAAK,SAAAC,GAAC,OAAEA,EAAEhE,IAAI8D,KAC7BpE,EAAKQ,UAAUR,EAAKQ,SACpB,EAAKmB,SACD,CACIR,W,EAKZjB,eAAgB,SAACkE,GACb,IAAIjD,EAAM,YAAI,EAAKI,MAAMJ,OACrBnB,EAAKmB,EAAMkD,MAAK,SAAAC,GAAC,OAAEA,EAAEhE,IAAI8D,KAC7BpE,EAAKiB,YAAYjB,EAAKiB,WACtB,EAAKU,SACD,CACIR,W,EAKZ2B,WAAW,WACP,EAAKnB,SAAS,CACVsC,gBAAiB,EAAK1C,MAAM0C,kB,EAIpClB,aAAa,SAAAjB,GACT,EAAKH,SAAS,CACV4C,WAAYzC,K,EAGpBI,WAAW,SAAClC,GACRA,EAAKM,GAAGkE,IAAQC,WAChBzE,EAAKU,KAAK,IAAIsD,KACdhE,EAAKiB,YAAW,EAChBjB,EAAKQ,SAAS,GACd,IAAIW,EAAM,CAACnB,GAAF,mBAAW,EAAKuB,MAAMJ,QAC/B,EAAKQ,SAAS,CACVR,UAEJ,EAAK2B,c,EAGTG,aAAa,SAACkB,GACV,EAAKxC,SAAS,CACVwC,Y,EAIRd,WAAW,SAAC3B,GACR,EAAKC,SACD,CACGyB,KAAM1B,EAAEE,OAAOE,S,EAI1B0B,cAAc,WACZ,IAAIrC,EAAM,EAAKI,MAAMJ,MAAMgD,QAAO,SAAAnE,GAAI,OAAGA,EAAKQ,YAC9C,EAAKmB,SAAS,CACVR,W,EAINsC,eAAe,WACX,IAAItC,EAAM,EAAKI,MAAMJ,MAAMgD,QAAO,SAAAnE,GAAI,OAAGA,EAAKiB,cAC9C,EAAKU,SAAS,CACVR,W,EAGRgB,MAAM,WACF,EAAKR,SAAS,CACVyB,KAAK,OACLe,OAAO,MACPF,gBAAe,K,EAIvBS,cAAc,WACV,OAAO,EAAKnD,MAAMJ,MAAMgD,QAAO,SAAAnE,GAAI,OAC/BA,EAAKY,KAAK+D,cAAcC,SAAS,EAAKrD,MAAM2C,WAAWS,mB,EAG/DE,cAAc,SAAC1D,GAAS,IACfgD,EAAQ,EAAK5C,MAAb4C,OACL,MAAW,aAARA,EACQhD,EAAMgD,QAAO,SAAAnE,GAAI,OAAEA,EAAKiB,cACjB,WAARkD,EACChD,EAAMgD,QAAO,SAAAnE,GAAI,OAAIA,EAAKiB,cAG1BE,G,EAGf2D,QAAQ,WACJ,IAAI3D,EAAO,EAAKuD,gBAEhB,OADAvD,EAAM,EAAK0D,cAAc1D,GACC,QAAnB,EAAKI,MAAM6B,KAAkB,cAAC,EAAD,CACpCjC,MAAQA,EACRjB,eAAgB,EAAKA,eACrBD,aAAc,EAAKA,eACb,cAAC,EAAD,CACNkB,MAAQA,EACRjB,eAAgB,EAAKA,eACrBD,aAAc,EAAKA,gB,4CAIvB,WACI,OACI,gCACI,sBAAKa,UAAU,qBAAf,UACA,oBAAIA,UAAU,yBAAd,4BAGA,sEAEA,oBAAIA,UAAU,iBAMd,cAAC,EAAD,CACJiC,aAAcT,KAAKS,aACnBD,WAAYR,KAAKQ,WACjBD,KAAMP,KAAKf,MAAM2C,WACjBd,KAAMd,KAAKf,MAAM6B,KACjBC,WAAYf,KAAKe,WACjBJ,aAAcX,KAAKW,aACnBQ,eAAgBnB,KAAKmB,eACrBD,cAAelB,KAAKkB,cACpBrB,MAAOG,KAAKH,QAKR,8BACKG,KAAKwC,YAET,eAACC,EAAA,EAAD,CACAC,OAAQ1C,KAAKf,MAAM0C,eACnBgB,OAAQ3C,KAAKQ,WAFb,UAII,cAACoC,EAAA,EAAD,CAAaD,OAAQ3C,KAAKQ,WAA1B,kCAIA,cAACqC,EAAA,EAAD,UACF,cAAC,EAAD,CAAgBjD,WAAYI,KAAKJ,yB,GA3KhCS,aCJpB,SAASyC,EAAT,GAAuD,IAApCpF,EAAmC,EAAnCA,KAAKC,EAA8B,EAA9BA,aAAaC,EAAiB,EAAjBA,eACjC,OACI,qBAAKY,UAAU,MAAf,SACI,eAACuE,EAAA,EAAD,CAAevE,UAAU,4BAAzB,UACI,cAACV,EAAA,EAAD,CACAC,KAAK,WACLC,GAAIN,EAAKM,GACTC,QAASP,EAAKQ,SACdC,SAAU,kBAAIR,EAAaD,EAAKM,OAIhC,sBAAKQ,UAAU,QAAf,UACI,6BAAKd,EAAKY,OACV,4BAAIZ,EAAKU,KAAKC,oBAGlB,cAACE,EAAA,EAAD,CACAC,UAAU,UACVE,MAAOhB,EAAKiB,WAAY,SAAU,UAClCF,QAAS,kBAAIb,EAAeF,EAAKM,KAHjC,SAMKN,EAAKiB,WAAY,YAAY,iBAmBlD,IAwBgBqE,EAxBH,SAAC,GAAuC,IAAtCnE,EAAqC,EAArCA,MAAMlB,EAA+B,EAA/BA,aAAaC,EAAkB,EAAlBA,eAC9B,OACI,cAACqF,EAAA,EAAD,UACKpE,EAAME,KAAK,SAAArB,GAAI,OACZ,cAACoF,EAAD,CAEApF,KAAMA,EACNE,eAAgBA,EAChBD,aAAcA,GAHTD,EAAKM,UC9BXkF,MAjBf,WAEI,OAEO,cAACC,EAAA,EAAD,CAAW3E,UAAU,OAArB,SACI,cAAC6C,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACF,cAAC,EAAD,WCAF8B,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4651d2cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {CustomInput, Button, Table} from 'reactstrap';\r\n\r\n\r\nlet RowIteam=({todo,toggleSelect,toggleComplete})=>{\r\n    return (\r\n        <tr>\r\n            <td scope='row'>\r\n            <CustomInput \r\n            type='checkbox'\r\n             id={todo.id}\r\n             checked={todo.isSelect}\r\n             onChange={()=>toggleSelect(todo.id)}\r\n\r\n            />\r\n            </td>\r\n            <td>\r\n                {todo.time.toDateString()}\r\n            </td>\r\n            <td>\r\n                {todo.text}\r\n            </td>\r\n            <td>\r\n                <Button className='' onClick={()=>toggleComplete(todo.id)} color={todo.isComplete ? 'danger': 'success'}>\r\n                    {\r\n                        todo.isComplete ? 'Complete':'Running'\r\n                    }\r\n                </Button>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\nRowIteam.propTypes={\r\n    todo:PropTypes.object.isRequired,\r\n    toggleSelect:PropTypes.func.isRequired,\r\n    toggleComplete:PropTypes.func.isRequired,\r\n}\r\n\r\nlet TableView=({todos,toggleComplete,toggleSelect})=>{\r\n    return(\r\n        <Table>\r\n        <thead>\r\n            <tr>\r\n                <th>#</th>\r\n                <th>Time</th>\r\n                <th>Todo</th>\r\n                 <th>Action</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n          {todos.map(todo=>(\r\n              <RowIteam\r\n              key={todo.id}\r\n              todo={todo}\r\n              toggleComplete={toggleComplete}\r\n              toggleSelect={toggleSelect}\r\n              />\r\n          ))}\r\n        </tbody>\r\n    </Table>\r\n    )\r\n    \r\n}\r\n\r\nTableView.propTypes={\r\n    todos:PropTypes.object.isRequired,\r\n    toggleSelect:PropTypes.func.isRequired,\r\n    toggleComplete:PropTypes.func.isRequired,\r\n}\r\n\r\nexport default TableView","import React, { Component } from 'react'\r\nimport { Button, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport PropTypes from 'prop-types'\r\n\r\n  class CreateTodoForm extends Component {\r\n      state={\r\n          text:'',\r\n          description:''\r\n\r\n      }\r\n      handleChange=(e)=>{\r\n          this.setState({\r\n              [e.target.name]:e.target.value\r\n          })\r\n\r\n      }\r\n      handleSubmit=(e)=>{\r\n        e.preventDefault();\r\n        this.props.createTodo(this.state);\r\n        e.target.reset();\r\n        this.setState({\r\n            text:'',\r\n           description:''\r\n\r\n        })\r\n      }\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                    <Label>Enter Your Task</Label>\r\n                    <Input\r\n                      type='text'\r\n                     text='text'\r\n                     name='text'\r\n                     placeholder='Do Some Code'\r\n                     value={this.state.text}\r\n                     onChange={this.handleChange}\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label>Enter Your Task</Label>\r\n                    <Input\r\n                    name='description'\r\n                    type='textarea'\r\n                    placeholder='Do Some Code'\r\n                    value={this.state.description}\r\n                    onChange={this.handleChange}\r\n                    />\r\n                </FormGroup>\r\n                <Button type='submit'>Create Task</Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\nCreateTodoForm.propTypes={\r\n    handleChange:PropTypes.func.isRequired,\r\n    handleSubmit:PropTypes.func.isRequired,\r\n    createTodo:PropTypes.func.isRequired,\r\n}\r\n\r\nexport default CreateTodoForm;\r\n"," import React from 'react';\r\n import { Button, Input } from 'reactstrap';\r\n import PropTypes from 'prop-types';\r\n \r\n function SearchPanel({term,toggleForm,handleSearch}) {\r\n     return (\r\n         <div className='d-flex'>\r\n             <Input \r\n             placeholder='Enter Your Term'\r\n             className=' mr-3'\r\n             name='term'\r\n             value={term}\r\n             onChange={e=>{handleSearch(e.target.value)}}\r\n             />\r\n             <Button color='success' onClick={toggleForm}>\r\n                    New\r\n             </Button>\r\n             \r\n         </div>\r\n     )\r\n }\r\n SearchPanel.propTypes={\r\n     term:PropTypes.string.isRequired,\r\n     handleSearch:PropTypes.func.isRequired,\r\n     toggleForm:PropTypes.func.isRequired,\r\n }\r\n \r\n export default SearchPanel;\r\n ","import React from 'react'\r\nimport { Button, ButtonGroup } from 'reactstrap';\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction FilterController({handleFilter}) {\r\n    return (\r\n        <div>\r\n            <ButtonGroup>\r\n                <Button color='success' onClick={()=>handleFilter('all')}>\r\n                 All\r\n                </Button>\r\n                <Button  color='primary' onClick={()=>handleFilter('running')}>\r\n                 Running\r\n                </Button>\r\n                <Button color='danger' onClick={()=>handleFilter('completed')}>\r\n                 Completed\r\n                </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    )\r\n}\r\nFilterController.propTypes={\r\n    handleFilter:PropTypes.func.isRequired\r\n}\r\n\r\nexport default FilterController\r\n","import React from 'react'\r\nimport { CustomInput, Label } from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction ViewControlle({view, changeView}) {\r\n    return (\r\n        <div className='d-flex'>\r\n            <Label for='list-view' className='mr-4 text-center'>\r\n            <CustomInput\r\n             type='radio'\r\n             name='view'\r\n             value='list'\r\n             id='list-view'\r\n             onChange={changeView}\r\n             className='d-inlline-block'\r\n             checked={view==='list'}\r\n            \r\n            />\r\n            List View\r\n            </Label>\r\n            <Label for='table-view' className='mr-4'>\r\n            <CustomInput\r\n             type='radio'\r\n             name='view'\r\n             value='table'\r\n             id='table-view'\r\n             onChange={changeView}\r\n             className='d-inlline-block'\r\n             checked={view==='table'}\r\n            \r\n            />\r\n           Table View\r\n            </Label>\r\n            \r\n\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nViewControlle.propTypes={\r\n    view:PropTypes.string.isRequired,\r\n    changeView:PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default ViewControlle\r\n","import React from 'react'\r\nimport { Button, ButtonGroup } from 'reactstrap';\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction BulkController({clearSelected,clearCompleted,reset}) {\r\n    return (\r\n        <div   >\r\n            <ButtonGroup>\r\n                <Button color='danger' onClick={()=> clearSelected('clearSelected')}>\r\n                Clear Selected\r\n                </Button>\r\n                <Button  color='danger' onClick={()=>clearCompleted('clearCompleted')}>\r\n                Clear Completed\r\n                </Button>\r\n                <Button color='danger' onClick={()=>reset('reset')}>\r\n                Reset\r\n                </Button>\r\n            </ButtonGroup>\r\n        </div>\r\n    )\r\n}\r\nBulkController.propTypes={\r\n    clearSelected:PropTypes.func.isRequired,\r\n    clearCompleted:PropTypes.func.isRequired,\r\n    reset:PropTypes.func.isRequired,\r\n\r\n}\r\n\r\nexport default BulkController;\r\n","import React from 'react';\r\nimport SearchPanel from './Search-Panel';\r\nimport PropTypes from 'prop-types'\r\nimport { Col, Row } from 'reactstrap';\r\nimport FilterController from './FilterController';\r\nimport ViewControlle from './ViewControlle';\r\nimport BulkController from './BulkController';\r\n\r\nlet Controller=({term,handleSearch,toggleForm,handleFilter,view,changeView,clearCompleted,clearSelected,reset})=>(\r\n    <div>\r\n        <SearchPanel\r\n           term={term}\r\n           handleSearch={handleSearch}\r\n           toggleForm={toggleForm}\r\n        />\r\n         <Row className='my-4'>\r\n        <Col md={{size:4}}>\r\n\r\n                <FilterController handleFilter={handleFilter}/>  \r\n       </Col>\r\n\r\n        <Col md={{size:4}} text='center'> \r\n\r\n                  <ViewControlle\r\n                  view={view}\r\n                  changeView={changeView}\r\n                  />\r\n        </Col>\r\n\r\n\r\n        <Col md={{size:4}} className='d-flex'> \r\n                      <div className=' ml-auto'>\r\n                      <BulkController\r\n                      clearCompleted={clearCompleted}\r\n                      clearSelected={clearSelected}\r\n                      reset={reset}\r\n                      />\r\n                      </div>\r\n        </Col>\r\n    </Row>\r\n\r\n    </div>\r\n   \r\n);\r\nController.propTypes={\r\n    toggleForm:PropTypes.func.isRequired,\r\n    handleSearch:PropTypes.func.isRequired,\r\n    term:PropTypes.string.isRequired,\r\n    handleFilter:PropTypes.func.isRequired,\r\n    view:PropTypes.string.isRequired,\r\n    changeView:PropTypes.func.isRequired,\r\n    clearSelected:PropTypes.func.isRequired,\r\n    clearCompleted:PropTypes.func.isRequired,\r\n    reset:PropTypes.func.isRequired,\r\n}\r\nexport default Controller;","import React, { Component } from 'react';\r\nimport ListView from '../ListView/Index';\r\nimport TableView from '../TableView/Index';\r\nimport { Modal, ModalBody, ModalHeader } from 'reactstrap';\r\nimport CreateTodoForm from '../CreateTodoForm/Index';\r\nimport Controller from '../Controllers/Index';\r\nimport shortid from 'shortid';\r\n \r\n\r\nclass Todos extends Component {\r\n    state={\r\n        todos:[\r\n            {\r\n            id:'01',\r\n            text:'Create Your Own TO-do List',\r\n            description:'describe YOur Task',\r\n            time: new Date(),\r\n            isComplete:false,\r\n            isSelect:false,\r\n        },\r\n        \r\n    ],\r\n    isOpenTodoForm:false,\r\n    searchTerm:'',\r\n    view:'list',\r\n    filter:'all',\r\n\r\n\r\n\r\n    }\r\n    toggleSelect=(todoId)=>{\r\n        let todos=[...this.state.todos]\r\n        let todo=todos.find(t=>t.id==todoId)\r\n        todo.isSelect=!todo.isSelect\r\n        this.setState(\r\n            {\r\n                todos\r\n            }\r\n        )\r\n\r\n    }\r\n    toggleComplete =(todoId)=>{\r\n        let todos=[...this.state.todos]\r\n        let todo=todos.find(t=>t.id==todoId)\r\n        todo.isComplete=!todo.isComplete\r\n        this.setState(\r\n            {\r\n                todos\r\n            }\r\n        )\r\n\r\n    }\r\n    toggleForm=()=>{\r\n        this.setState({\r\n            isOpenTodoForm: !this.state.isOpenTodoForm\r\n        })\r\n\r\n    }\r\n    handleSearch=value=>{\r\n        this.setState({\r\n            SearchTerm: value\r\n        })\r\n}\r\n    createTodo=(todo)=>{\r\n        todo.id=shortid.generate();\r\n        todo.time=new Date();\r\n        todo.isComplete=false;\r\n        todo.isSelect=''\r\n        let todos=[todo, ...this.state.todos];\r\n        this.setState({\r\n            todos\r\n        })\r\n        this.toggleForm();\r\n\r\n    }\r\n    handleFilter=(filter)=>{\r\n        this.setState({\r\n            filter\r\n        })\r\n\r\n    }\r\n    changeView=(e)=>{\r\n        this.setState(\r\n            {\r\n               view: e.target.value\r\n            }\r\n         )\r\n    }\r\n    clearSelected=()=>{\r\n      let todos=this.state.todos.filter(todo=>!todo.isSelect);\r\n      this.setState({\r\n          todos\r\n      })\r\n\r\n    }\r\n    clearCompleted=()=>{\r\n        let todos=this.state.todos.filter(todo=>!todo.isComplete);\r\n        this.setState({\r\n            todos\r\n        })\r\n    }\r\n    reset=()=>{\r\n        this.setState({\r\n            view:'list',\r\n            filter:'all',\r\n            isOpenTodoForm:false\r\n        })\r\n\r\n    }\r\n    performSearch=()=>{\r\n        return this.state.todos.filter(todo=>\r\n            todo.text.toLowerCase().includes(this.state.searchTerm.toLowerCase())\r\n        );\r\n        }\r\n    performFilter=(todos)=>{\r\n        let {filter}=this.state\r\n        if(filter=='completed'){\r\n            return todos.filter(todo=>todo.isComplete)\r\n        } else if(filter=='running'){\r\n            return todos.filter(todo=> !todo.isComplete)\r\n        }\r\n        else{\r\n            return todos\r\n        }\r\n    }\r\n    getView=()=>{\r\n        let todos= this.performSearch()\r\n        todos=this.performFilter(todos)\r\n        return this.state.view == 'list' ? (<ListView\r\n        todos={ todos} \r\n        toggleComplete={this.toggleComplete}\r\n        toggleSelect={this.toggleSelect}\r\n        /> ):(<TableView\r\n        todos={ todos} \r\n        toggleComplete={this.toggleComplete}\r\n        toggleSelect={this.toggleSelect}\r\n        />)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=' text-center mb-5 '>\r\n                <h1 className='display-4 text-primary'>\r\n                    To-Do List App\r\n                </h1>\r\n                <span>Develop By: Muhammad Azharul Islam</span>\r\n                 \r\n                <hr className='bg-danger' />\r\n                \r\n                \r\n                </div>\r\n                \r\n                \r\n                <Controller\r\n            handleSearch={this.handleSearch}\r\n            toggleForm={this.toggleForm}\r\n            term={this.state.searchTerm}\r\n            view={this.state.view}\r\n            changeView={this.changeView}\r\n            handleFilter={this.handleFilter}\r\n            clearCompleted={this.clearCompleted}\r\n            clearSelected={this.clearSelected}\r\n            reset={this.reset}\r\n            />\r\n               \r\n          \r\n             \r\n                <div>\r\n                    {this.getView()}\r\n                </div>\r\n                 <Modal\r\n                 isOpen={this.state.isOpenTodoForm}\r\n                 toggle={this.toggleForm}\r\n                 >\r\n                     <ModalHeader toggle={this.toggleForm}>\r\n                         Create New Todo Item\r\n\r\n                     </ModalHeader>\r\n                     <ModalBody>\r\n                   <CreateTodoForm createTodo={this.createTodo}/>\r\n                     </ModalBody>\r\n\r\n                 </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todos;\r\n\r\n ","import React from 'react';\r\nimport {ListGroupItem,CustomInput,Button, ListGroup} from 'reactstrap';\r\nimport Todos from '../todos/Index';\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction ListItem({todo,toggleSelect,toggleComplete}) {\r\n    return (\r\n        <div className='m-2'>\r\n            <ListGroupItem className='d-flex align-items-center'>\r\n                <CustomInput\r\n                type='checkbox'\r\n                id={todo.id}\r\n                checked={todo.isSelect}\r\n                onChange={()=>toggleSelect(todo.id)}\r\n\r\n\r\n                />\r\n                <div className='mx-3 '>\r\n                    <h4>{todo.text}</h4>\r\n                    <p>{todo.time.toDateString()}</p>\r\n\r\n                </div>\r\n                <Button \r\n                className='ml-auto' \r\n                color={todo.isComplete? 'danger': 'success'} \r\n                onClick={()=>toggleComplete(todo.id)}\r\n                >\r\n\r\n                    {todo.isComplete? 'Completed':'Running'}\r\n\r\n                    </Button>\r\n\r\n                \r\n            </ListGroupItem>\r\n        </div>\r\n    )\r\n}\r\nListItem.propTypes={\r\n    todo:PropTypes.object.isRequired,\r\n    toggleComplete:PropTypes.func.isRequired,\r\n    toggleSelect:PropTypes.func.isRequired,\r\n\r\n\r\n}\r\n\r\n \r\n\r\nlet ListView=({todos,toggleSelect,toggleComplete})=>{\r\n    return(\r\n        <ListGroup>\r\n            {todos.map( todo=>(\r\n                <ListItem\r\n                key={todo.id}\r\n                todo={todo}\r\n                toggleComplete={toggleComplete}\r\n                toggleSelect={toggleSelect}\r\n                />\r\n            )\r\n\r\n            )}\r\n        </ListGroup>\r\n    )\r\n}\r\n\r\n ListView.propTypes={\r\n    todos:PropTypes.object.isRequired,\r\n    toggleComplete:PropTypes.func.isRequired,\r\n    toggleSelect:PropTypes.func.isRequired,\r\n\r\n    \r\n }\r\n export default ListView;\r\n","import React from 'react'\r\nimport {Container,Row,Col} from 'reactstrap'\r\nimport ListItem from './Components/ListView/Index';\r\nimport Todos from './Components/todos/Index';\r\n\r\nfunction App() {\r\n \r\n    return (\r\n       \r\n           <Container className='my-3'>\r\n               <Row>\r\n                   <Col>\r\n                 <Todos/>\r\n                  \r\n                    \r\n                   </Col>\r\n               </Row>\r\n           </Container>\r\n    );\r\n       \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n \nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}